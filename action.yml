name: 'Build Jekyll for GitHub Pages'
description: 'A GitHub Action for producing Jekyll build artifacts compatible with GitHub Pages'
author: 'GitHub'
inputs:
  source:
    description: 'Directory where the source files reside.'
    required: false
    default: ./
  destination:
    description: 'Output directory of the build. Although it can be nested inside the source, it cannot be the same as the source directory.'
    required: false
    default: ./_site
  future:
    description: 'Publishes posts with a future date. When set to true, the build is made with the --future option which overrides the future option that may be set in a Jekyll configuration file.'
    required: false
    default: false
  build_revision:
    description: 'The SHA-1 of the git commit for which the build is running. Default to GITHUB_SHA.'
    required: false
    default: ${{ github.sha }}
  verbose:
    description: 'Verbose output'
    required: false
    default: true
  token:
    description: 'GitHub token'
    required: true
    default: ${{ github.token }}
outputs:
  ghcr_up:
    description: 'Was GHCR supposedly available?'
    value: ${{ steps.finale.outputs.ghcr_up }}
  image_pulled_from_ghcr:
    description: 'Was the Docker image pulled from GHCR?'
    value: ${{ steps.finale.outputs.image_pulled_from_ghcr }}
  image_built_locally:
    description: 'Was the Docker image built locally?'
    value: ${{ steps.finale.outputs.image_built_locally }}
  image_ref:
    description: 'The published Docker URL, git branch, or git commit SHA for the Docker image used.'
    value: ${{ steps.finale.outputs.image_ref }}
runs:
  using: composite
  steps:
    - name: Calculate docker tag information
      id: action_meta
      shell: bash
      env:
        DOCKER_TAG_FALLBACK: v1.0.7
        # Do not set this as `GITHUB_ACTION_REPOSITORY` due to a bug in the runner!
        #GITHUB_ACTION_REPO: ${{ github.action_repository }}
        GITHUB_ACTION_REPO: actions/jekyll-build-pages
        # Infer Docker container image to use, if possible
        # Do not set this as `GITHUB_ACTION_REF` due to a bug in the runner!
        GITHUB_ACTION_REF_COMMITISH: ${{ github.action_ref }}
      run: |
        CLEAN_COMMITISH=$(echo "${GITHUB_ACTION_REF_COMMITISH}" | sed 's/[^a-zA-Z0-9._-]//g')

        # Check for the default branch
        if [[ "${CLEAN_COMMITISH}" == "main" ]]; then
          DOCKER_TAG="latest"
          echo "Using Docker tag '${DOCKER_TAG}' for git default branch '${CLEAN_COMMITISH}'"
        # Check for format of either major version tag ("v1") or a standard SemVer tag ("v1.0.7")
        elif [[ "${CLEAN_COMMITISH}" =~ ^v[0-9]+(\.[0-9]+\.[0-9]+)?$ ]]; then
          DOCKER_TAG="${CLEAN_COMMITISH}"
          echo "Using Docker tag '${DOCKER_TAG}' for git version tag '${CLEAN_COMMITISH}'"
        else
          DOCKER_TAG="${DOCKER_TAG_FALLBACK}"
          echo "Using Docker tag fallback '${DOCKER_TAG}' for git non-default branch or commit SHA '${CLEAN_COMMITISH}'"
        fi

        echo "ref=${GITHUB_ACTION_REF_COMMITISH}" >> $GITHUB_OUTPUT
        echo "commitish=${CLEAN_COMMITISH}" >> $GITHUB_OUTPUT
        echo "docker_tag_fallback=${DOCKER_TAG_FALLBACK}" >> $GITHUB_OUTPUT
        echo "docker_tag=${DOCKER_TAG}" >> $GITHUB_OUTPUT
        echo "docker_repo=${GITHUB_ACTION_REPO}" >> $GITHUB_OUTPUT
        echo "docker_registry=ghcr.io" >> $GITHUB_OUTPUT

    - name: Check GHCR status
      id: ghcr
      shell: bash
      run: |
        # Using an internal endpoint would be better than the status page
        # but this is an acceptable starting point
        if [ -z "${GHCR_STATUS}" ]; then
          PACKAGES_STATUS=$(curl -LSs https://www.githubstatus.com/api/v2/components.json | jq -r '.components[] | select(.name == "Packages") | .status')
        else
          # Allow overriding behavior via environment variable GHCR_STATUS
          PACKAGES_STATUS="${GHCR_STATUS}"
        fi
        [[ "${PACKAGES_STATUS}" == "operational" ]] && GHCR_UP=true || GHCR_UP=false

        echo "status=${PACKAGES_STATUS}" >> $GITHUB_OUTPUT
        echo "up=${GHCR_UP}" >> $GITHUB_OUTPUT

    - if: ${{ steps.ghcr.outputs.up == 'true' }}
      name: Login to GHCR
      id: login
      shell: sh
      continue-on-error: true
      env:
        DOCKER_REGISTRY: ${{ steps.action_meta.outputs.docker_registry }}
        GITHUB_TOKEN: ${{ inputs.token }}
      run: |
        echo $GITHUB_TOKEN | docker login $DOCKER_REGISTRY -u $GITHUB_ACTOR --password-stdin

    - name: Create reusable values
      id: docker
      shell: bash
      env:
        DOCKER_REGISTRY: ${{ steps.action_meta.outputs.docker_registry }}
        DOCKER_REPO: ${{ steps.action_meta.outputs.docker_repo }}
        DOCKER_TAG: ${{ steps.action_meta.outputs.docker_tag }}
        # Do we need to manually build the Docker image?
        MUST_BUILD: ${{ steps.ghcr.outputs.up != 'true' || steps.login.outcome != 'success' }}
        # "If the action is written using a composite, then it will not automatically get INPUT_<VARIABLE_NAME>."
        # Ergo, these must be manually created here using `inputs` references.
        INPUT_SOURCE: ${{ inputs.source }}
        INPUT_DESTINATION: ${{ inputs.destination }}
        INPUT_FUTURE: ${{ inputs.future }}
        INPUT_BUILD_REVISION: ${{ inputs.build_revision }}
        INPUT_VERBOSE: ${{ inputs.verbose }}
        INPUT_TOKEN: ${{ inputs.token }}
      run: |
        DOCKER_IMAGE_URL="${DOCKER_REGISTRY}/${DOCKER_REPO}:${DOCKER_TAG}"

        # Modeled after: https://github.com/actions/runner/blob/1ceb1a67f270537fe80da23445fa78bfb97503ea/src/Runner.Worker/Container/ContainerInfo.cs#L37
        # example: ghcrioactionsjekyllbuildpagesv107_7ca21f
        DOCKER_CONTAINER_BASENAME=$(echo "${DOCKER_IMAGE_URL}" | sed 's/[^a-zA-Z0-9]//g')
        NEW_GUID=$(uuidgen)
        DOCKER_CONTAINER_NAME="${DOCKER_CONTAINER_BASENAME}_${NEW_GUID:0:6}"

        # actions/runner source: https://github.com/actions/runner/blob/0484afeec71b612022e35ba80e5fe98a99cd0be8/src/Runner.Worker/Container/DockerCommandManager.cs#L49
        # actions/runner example: 6c0442
        # However, here, we're generating a SHA from the workflow run information
        # instead of trying to figure out the equivalent directory path
        LABEL_BASE="${GITHUB_RUN_ID}/${GITHUB_RUN_NUMBER}/${GITHUB_JOB}"
        LABEL_SHA=$(echo "${LABEL_BASE}" | shasum -a 256 | awk '{print $1}')
        DOCKER_CONTAINER_LABEL="${LABEL_SHA:0:6}"

        # Craft an expected image name in case we need to do the local build
        DOCKER_IMAGE_NAME=$DOCKER_IMAGE_URL
        if [[ "$MUST_BUILD" == "true" ]]; then
          DOCKER_IMAGE_NAME="${DOCKER_CONTAINER_LABEL}:$(uuidgen)"
        fi

        # actions/runner source: https://github.com/actions/runner/blob/0484afeec71b612022e35ba80e5fe98a99cd0be8/src/Runner.Worker/Container/DockerCommandManager.cs#L130-L140
        # Gather list of environment variable names starting with GITHUB_
        GITHUB_ENV_VARS=$(env | while IFS= read -r line; do key=${line%%=*}; if [[ "$key" =~ ^GITHUB_.+$ ]]; then printf -- '-e %s ' "$key"; fi; done)
        # Gather list of environment variable names starting with ACTIONS_
        ACTIONS_ENV_VARS=$(env | while IFS= read -r line; do key=${line%%=*}; if [[ "$key" =~ ^ACTIONS_.+$ ]]; then printf -- '-e %s ' "$key"; fi; done)
        # Gather list of environment variable names with values starting with INPUT_
        INPUT_ENV_VARS=$(env | while IFS= read -r line; do key=${line%%=*}; val=${line#*=}; if [[ "$key" =~ ^INPUT_.+$ ]]; then printf -- '-e %s=%s ' "$key" "$val"; fi; done)
        PASSTHROUGH_ENV_VARS="${GITHUB_ENV_VARS}${ACTIONS_ENV_VARS}${INPUT_ENV_VARS}"

        echo "registry=${DOCKER_REGISTRY}" >> $GITHUB_OUTPUT
        echo "building=${MUST_BUILD}" >> $GITHUB_OUTPUT
        echo "image_url=${DOCKER_IMAGE_URL}" >> $GITHUB_OUTPUT
        echo "image_name=${DOCKER_IMAGE_NAME}" >> $GITHUB_OUTPUT
        echo "container_name=${DOCKER_CONTAINER_NAME}" >> $GITHUB_OUTPUT
        echo "container_label=${DOCKER_CONTAINER_LABEL}" >> $GITHUB_OUTPUT
        echo "env_expansion=${PASSTHROUGH_ENV_VARS}" >> $GITHUB_OUTPUT

    - if: ${{ steps.login.outcome == 'success' }}
      name: Pull prebuilt Docker image
      shell: sh
      env:
        DOCKER_IMAGE_URL: ${{ steps.docker.outputs.image_url }}
      run: |
        docker pull $DOCKER_IMAGE_URL

    - if: ${{ steps.login.outcome != 'success' }}
      name: Build local Docker image
      shell: sh
      env:
        DOCKER_IMAGE_NAME: ${{ steps.docker.outputs.image_name }}
      run: |
        # Manually change directory given bug with github.action_path reference
        # Issue: https://github.com/actions/runner/issues/716
        # Pending PR: https://github.com/actions/runner/pull/2517
        cd $GITHUB_ACTION_PATH

        # NOTE: This will rely on DockerHub to pull the ruby-slim image
        docker build -t $DOCKER_IMAGE_NAME -f Dockerfile .

    - name: Run task in Docker container
      shell: sh
      env:
        DOCKER_CONTAINER_NAME: ${{ steps.docker.outputs.container_name }}
        DOCKER_CONTAINER_LABEL: ${{ steps.docker.outputs.container_label }}
        DOCKER_IMAGE_NAME: ${{ steps.docker.outputs.image_name }}
      run: |
        docker run \
          --name $DOCKER_CONTAINER_NAME \
          --label $DOCKER_CONTAINER_LABEL \
          --workdir /github/workspace \
          --rm \
          ${{ steps.docker.outputs.env_expansion }} \
          -e HOME \
          -e CI=true \
          -e GITHUB_ACTIONS=true \
          -e GITHUB_WORKSPACE="/github/workspace" \
          -v "/var/run/docker.sock":"/var/run/docker.sock" \
          -v "$RUNNER_TEMP/_github_home":"/github/home" \
          -v "$RUNNER_TEMP/_github_workflow":"/github/workflow" \
          -v "$RUNNER_TEMP/_runner_file_commands":"/github/file_commands" \
          -v "$GITHUB_WORKSPACE":"/github/workspace" \
          $DOCKER_IMAGE_NAME

    - name: Calculate final outputs
      id: finale
      shell: sh
      env:
        GHCR_UP: ${{ steps.ghcr.outputs.up == 'true' }}
        DOCKER_PULLED_FROM_GHCR: ${{ steps.docker.outputs.building != 'true' }}
        DOCKER_BUILT_LOCALLY: ${{ steps.docker.outputs.building == 'true' }}
        DOCKER_IMAGE_NAME: ${{ steps.docker.outputs.image_name }}
      run: |
        # Promised outputs
        echo "ghcr_up=$GHCR_UP" >> $GITHUB_OUTPUT
        echo "image_pulled_from_ghcr=$DOCKER_PULLED_FROM_GHCR" >> $GITHUB_OUTPUT
        echo "image_built_locally=$DOCKER_BUILT_LOCALLY" >> $GITHUB_OUTPUT
        echo "image_ref=$DOCKER_IMAGE_NAME" >> $GITHUB_OUTPUT

        # Debugging outputs
        # id: action_meta
        #echo "ref=" >> $GITHUB_OUTPUT
        #echo "commitish=" >> $GITHUB_OUTPUT
        #echo "docker_tag_fallback=" >> $GITHUB_OUTPUT
        #echo "docker_registry=" >> $GITHUB_OUTPUT
        #echo "docker_tag=" >> $GITHUB_OUTPUT

        # id: ghcr
        #echo "status=" >> $GITHUB_OUTPUT
        #echo "up=" >> $GITHUB_OUTPUT

        # id: login
        # ${{ steps.login.outcome }} != 'success'

        # id: docker
        #echo "registry=" >> $GITHUB_OUTPUT
        #echo "building=" >> $GITHUB_OUTPUT
        #echo "image_url=" >> $GITHUB_OUTPUT
        #echo "image_name=" >> $GITHUB_OUTPUT
        #echo "container_name=" >> $GITHUB_OUTPUT
        #echo "container_label=" >> $GITHUB_OUTPUT
        #echo "env_expansion=" >> $GITHUB_OUTPUT
